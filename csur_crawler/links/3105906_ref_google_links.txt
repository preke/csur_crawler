http://scholar.google.com/scholar?hl=en&q=Robin+Abraham+and+Martin+Erwig.+2005.+Goal-directed+debugging+of+spreadsheets.+In+Proceedings+of+the+2005+IEEE+Symposium+on+Visual+Languages+and+Human-Centric+Computing.+37%2D%2D44.+10.1109%2FVLHCC.2005.42+
http://scholar.google.com/scholar?hl=en&q=Edward+Aftandilian%2C+Raluca+Sauciuc%2C+Siddharth+Priya%2C+and+Sundaresan+Krishnan.+2012.+Building+useful+program+analysis+tools+using+an+extensible+java+compiler.+In+Proceedings+of+the+International+Working+Conference+on+Source+Code+Analysis+and+Manipulation+%28SCAM%E2%80%9912%29.+14%2D%2D23.+10.1109%2FSCAM.2012.28+
http://scholar.google.com/scholar?hl=en&q=Paul+E.+Ammann+and+John+C.+Knight.+1988.+Data+diversity%3A+An+approach+to+software+fault+tolerance.+IEEE+Trans.+Comput.+37%2C+4+%281988%29%2C+418%2D%2D425.+10.1109%2F12.2185+
http://scholar.google.com/scholar?hl=en&q=Jesper+Andersen+and+Julia+L.+Lawall.+2010.+Generic+patch+inference.+Automat.+Softw.+Eng.+17%2C+2+%282010%29%2C+119%2D%2D148.+10.1007%2Fs10515-010-0062-z+
http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2009.+Automatic+Software+Generation+and+Improvement+Through+Search+Based+Techniques.+Ph.D.+Dissertation.+The+University+of+Birmingham.
http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2011.+Evolutionary+repair+of+faulty+software.+Appl.+Soft+Comput.+11%2C+4+%282011%29%2C+3494%2D%2D3514.+10.1016%2Fj.asoc.2011.01.023+
http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri+and+Xin+Yao.+2008.+A+novel+co-evolutionary+approach+to+automatic+software+bug+fixing.+In+Proceedings+of+the+IEEE+Congress+on+Evolutionary+Computation.+162%2D%2D168.
http://scholar.google.com/scholar?hl=en&q=Algirdas+Avizienis.+1985.+The+N-version+approach+to+fault-tolerant+software.+IEEE+Trans.+Softw.+Eng.+11%2C+12+%281985%29%2C+1491%2D%2D1501.+10.1109%2FTSE.1985.231893+
http://scholar.google.com/scholar?hl=en&q=Algirdas+Avizienis%2C+J.-C.+Laprie%2C+Brian+Randell%2C+and+Carl+Landwehr.+2004.+Basic+concepts+and+taxonomy+of+dependable+and+secure+computing.+IEEE+Trans.+Depend.+Sec.+Comput.+1%2C+1+%282004%29%2C+11%2D%2D33.+10.1109%2FTDSC.2004.2+
http://scholar.google.com/scholar?hl=en&q=Tanzirul+Azim%2C+Iulian+Neamtiu%2C+and+Lisa+Marvel.+2014.+Towards+self-healing+smartphone+software+via+automated+patching.+In+Proceedings+of+the+29th+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+623%2D%2D628.+10.1145%2F2642937.2642955+
http://scholar.google.com/scholar?hl=en&q=E.+T.+Barr%2C+M.+Harman%2C+P.+McMinn%2C+M.+Shahbaz%2C+and+S.+Yoo.+2015.+The+oracle+problem+in+software+testing%3A+A+survey.+IEEE+Trans.+Soft.+Eng.+41%2C+5+%282015%29%2C+507%2D%2D525.
http://scholar.google.com/scholar?hl=en&q=Earl+T.+Barr%2C+Yuriy+Brun%2C+Premkumar+T.+Devanbu%2C+Mark+Harman%2C+and+Federica+Sarro.+2014.+The+plastic+surgery+hypothesis.+In+Proceedings+of+the+22nd+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+306%2D%2D317.+10.1145%2F2635868.2635898+
http://scholar.google.com/scholar?hl=en&q=Emery+D.+Berger+and+Benjamin+G.+Zorn.+2006.+DieHard%3A+Probabilistic+memory+safety+for+unsafe+languages.+ACM+SIGPLAN+Not.+41%2C+6+%282006%29%2C+158%2D%2D168.+10.1145%2F1133255.1134000+
http://scholar.google.com/scholar?hl=en&q=Rastislav+Bodik+and+Barbara+Jobstmann.+2013.+Algorithmic+program+synthesis%3A+Introduction.+Int.+J.+Softw.+Tools+Technol.+Transf.+15%2C+5+%282013%29%2C+397%2D%2D411.
http://scholar.google.com/scholar?hl=en&q=M.+Brodie%2C+S.+Ma%2C+G.+Lohman%2C+L.+Mignet%2C+M.+Wilding%2C+J.+Champlin%2C+and+P.+Sohn.+2005.+Quickly+finding+known+software+problems+via+automated+symptom+matching.+In+Proceedings+of+the+International+Conference+on+Autonomic+Computing.+101%2D%2D110.+10.1109%2FICAC.2005.49+
http://scholar.google.com/scholar?hl=en&q=Yuriy+Brun%2C+Earl+Barr%2C+Ming+Xiao%2C+Claire+Le+Goues%2C+and+Prem+Devanbu.+2013.+Evolution+Vs.+Intelligent+Design+in+Program+Patching.+Technical+Report.+UC+Davis.
http://scholar.google.com/scholar?hl=en&q=Yan+Cai+and+Lingwei+Cao.+2016.+Fixing+deadlocks+via+lock+pre-acquisitions.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering.+ACM%2C+1109%2D%2D1120.+10.1145%2F2884781.2884819+
http://scholar.google.com/scholar?hl=en&q=G.+Candea+and+A.+Fox.+2001.+Recursive+restartability%3A+Turning+the+reboot+sledgehammer+into+a+scalpel.+In+Proceedings+of+the+8th+Workshop+on+Hot+Topics+in+Operating+Systems.+125%2D%2D130.+
http://scholar.google.com/scholar?hl=en&q=G.+Candea+and+A.+Fox.+2003.+Crash-only+software.+In+Proceedings+of+the+9th+Conference+on+Hot+Topics+in+Operating+Systems.+12%2D%2D12.+
http://scholar.google.com/scholar?hl=en&q=George+Candea%2C+Shinichi+Kawamoto%2C+Yuichi+Fujiki%2C+Greg+Friedman%2C+and+Armando+Fox.+2004.+Microreboot%3A+A+technique+for+cheap+recovery.+In+Proceedings+of+the+6th+Conference+on+Symposium+on+Operating+Systems+Design+8+Implementation.+3%2D%2D3.+
http://scholar.google.com/scholar?hl=en&q=G.+Candea%2C+E.+Kiciman%2C+S.+Zhang%2C+P.+Keyani%2C+and+A.+Fox.+2003.+JAGR%3A+An+autonomous+self-recovering+application+server.+In+Proceedings+of+the+Workshop+on+Active+Middleware+Services.+168%2D%2D177.
http://scholar.google.com/scholar?hl=en&q=Michael+Carbin%2C+Sasa+Misailovic%2C+Michael+Kling%2C+and+Martin+C.+Rinard.+2011.+Detecting+and+escaping+infinite+loops+with+jolt.+In+Procceedings+of+the+European+Conference+on+Object-Oriented+Programming+%28ECOOP%E2%80%9911%29.+609%2D%2D633.+
http://scholar.google.com/scholar?hl=en&q=Antonio+Carzaniga%2C+Alessandra+Gorla%2C+Andrea+Mattavelli%2C+Nicol%C3%B2+Perino%2C+and+Mauro+Pezz%C3%A8.+2013.+Automatic+recovery+from+runtime+failures.+In+Proceedings+of+the+International+Conference+on+Software+Engineering.+
http://scholar.google.com/scholar?hl=en&q=Antonio+Carzaniga%2C+Alessandra+Gorla%2C+Nicol%C3%B2+Perino%2C+and+Mauro+Pezz%C3%A8.+2010.+Automatic+workarounds+for+web+applications.+In+Proceedings+of+the+Foundations+of+Software+Engineering+Conference.+237%2D%2D246.+10.1145%2F1882291.1882327+
http://scholar.google.com/scholar?hl=en&q=Satish+Chandra%2C+Emina+Torlak%2C+Shaon+Barman%2C+and+Rastislav+Bodik.+2011.+Angelic+debugging.+In+Proceeding+of+the+International+Conference+on+Software+Engineering.+121%2D%2D130.+10.1145%2F1985793.1985811+
http://scholar.google.com/scholar?hl=en&q=Shang-Wen+Cheng%2C+David+Garlan%2C+Bradley+R.+Schmerl%2C+Jo%C3%A3o+Pedro+Sousa%2C+Bridget+Spitnagel%2C+and+Peter+Steenkiste.+2002.+Using+architectural+style+as+a+basis+for+system+self-repair.+In+Proceedings+of+the+IFIP+17th+World+Computer+Congress%2F3rd+IEEE%2FIFIP+Conference+on+Software+Architecture%3A+System+Design%2C+Development+and+Maintenance.+45%2D%2D59.+
http://scholar.google.com/scholar?hl=en&q=Zack+Coker+and+Munawar+Hafiz.+2013.+Program+transformations+to+fix+C+integers.+In+Proceedings+of+the+International+Conference+on+Software+Engineering.+792%2D%2D801.+
http://scholar.google.com/scholar?hl=en&q=Benoit+Cornu%2C+Lionel+Seinturier%2C+and+Martin+Monperrus.+2015.+Exception+handling+analysis+and+transformation+using+fault+injection%3A+Study+of+resilience+against+unanticipated+exceptions.+Inf.+Softw.+Technol.+57+%28Jan.+2015%29%2C+66%2D%2D76.
http://scholar.google.com/scholar?hl=en&q=Manuel+Costa%2C+Jon+Crowcroft%2C+Miguel+Castro%2C+Antony+Rowstron%2C+Lidong+Zhou%2C+Lintao+Zhang%2C+and+Paul+Barham.+2005.+Vigilante%3A+End-to-end+containment+of+internet+worms.+In+ACM+SIGOPS+Operating+Systems+Review%2C+Vol.+39.+133%2D%2D147.+10.1145%2F1095809.1095824+
http://scholar.google.com/scholar?hl=en&q=Marcos+Aur%C3%A9lio+Almeida+da+Silva%2C+Alix+Mougenot%2C+Xavier+Blanc%2C+and+Reda+Bendraou.+2010.+Towards+automated+inconsistency+handling+in+design+models.+In+Proceedings+of+the+22nd+International+Conference+on+Advanced+Information+Systems+Engineering.+348%2D%2D362.+
http://scholar.google.com/scholar?hl=en&q=Valentin+Dallmeier%2C+Andreas+Zeller%2C+and+Bertrand+Meyer.+2009.+Generating+fixes+from+object+behavior+anomalies.+In+Proceedings+of+the+International+Conference+on+Automated+Software+Engineering.+5.+10.1109%2FASE.2009.15+
http://scholar.google.com/scholar?hl=en&q=Brett+Daniel%2C+Vilas+Jagannath%2C+Danny+Dig%2C+and+Darko+Marinov.+2009.+ReAssert%3A+Suggesting+repairs+for+broken+unit+tests.+In+Proceedings+of+the+24th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+433%2D%2D444.+10.1109%2FASE.2009.17+
http://scholar.google.com/scholar?hl=en&q=V.+Debroy+and+W.+E.+Wong.+2010.+Using+mutation+to+automatically+suggest+fixes+for+faulty+programs.+In+Proceedings+of+the+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+65%2D%2D74.+10.1109%2FICST.2010.66+
http://scholar.google.com/scholar?hl=en&q=Favio+Demarco%2C+Jifeng+Xuan%2C+Daniel+Le+Berre%2C+and+Martin+Monperrus.+2014.+Automatic+repair+of+buggy+if+conditions+and+missing+preconditions+with+SMT.+In+Proceedings+of+the+6th+International+Workshop+on+Constraints+in+Software+Testing%2C+Verification%2C+and+Analysis+%28CSTVA%E2%80%9914%29.+Hyderabad%2C+India.+10.1145%2F2593735.2593740+
http://scholar.google.com/scholar?hl=en&q=Brian+Demsky+and+Alokika+Dash.+2008.+Bristlecone%3A+A+language+for+robust+software+systems.+In+Proceedings+of+the+European+Conference+on+Object-Oriented+Programming+%28ECOOP%E2%80%9908%29.+490%2D%2D515.+10.1007%2F978-3-540-70592-5_21+
http://scholar.google.com/scholar?hl=en&q=B.+Demsky+and+M.+Rinard.+2003.+Automatic+detection+and+repair+of+errors+in+data+structures.+ACM+SIGPLAN+Not.+38%2C+11+%282003%29%2C+78%2D%2D95.+10.1145%2F949343.949314+
http://scholar.google.com/scholar?hl=en&q=Giovanni+Denaro%2C+Mauro+Pezz%C3%A8%2C+and+Davide+Tosi.+2009.+Ensuring+interoperable+service-oriented+systems+through+engineered+self-healing.+In+Proceedings+of+the+7th+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering.+253%2D%2D262.+10.1145%2F1595696.1595734+
http://scholar.google.com/scholar?hl=en&q=Louise+A.+Dennis%2C+Raul+Monroy%2C+and+Pablo+Nogueira.+2006.+Proof-directed+debugging+and+repair.+In+Proceedings+of+the+7th+Symposium+on+Trends+in+Functional+Programming.+131%2D%2D140.
http://scholar.google.com/scholar?hl=en&q=Aritra+Dhar%2C+Rahul+Purandare%2C+Mohan+Dhawan%2C+and+Suresh+Rangaswamy.+2015.+CLOTHO%3A+Saving+programs+from+malformed+strings+and+incorrect+string-handling.+In+Foundations+of+Software+Engineering.+ACM%2C+555%2D%2D566.+10.1145%2F2786805.2786877+
http://scholar.google.com/scholar?hl=en&q=Kinga+Dobolyi+and+Westley+Weimer.+2008.+Changing+java%E2%80%99s+semantics+for+handling+null+pointer+exceptions.+In+Proceedings+of+the+19th+International+Symposium+on+Software+Reliability+Engineering.+47%2D%2D56.+10.1109%2FISSRE.2008.59+
http://scholar.google.com/scholar?hl=en&q=J.+A.+Duraes+and+H.+S.+Madeira.+2006.+Emulation+of+software+faults%3A+A+field+data+study+and+a+practical+approach.+IEEE+Trans.+Softw.+Eng.+32%2C+11+%282006%29%2C+849%2D%2D867.+10.1109%2FTSE.2006.113+
http://scholar.google.com/scholar?hl=en&q=Loris+D%E2%80%99Antoni%2C+Roopsha+Samanta%2C+and+Rishabh+Singh.+2016.+Qlose%3A+Program+repair+with+quantitative+objectives.+In+International+Conference+on+Computer+Aided+Verification.+Springer%2C+383%2D%2D401.
http://scholar.google.com/scholar?hl=en&q=Marc+Eisenstadt.+1997.+My+hairiest+bug+war+stories.+Commun.+ACM+40%2C+4+%281997%29%2C+30%2D%2D37.+10.1145%2F248448.248456+
http://scholar.google.com/scholar?hl=en&q=B.+Elkarablieh%2C+I.+Garcia%2C+Y.+L.+Suen%2C+and+S.+Khurshid.+2007.+Assertion-based+repair+of+complex+data+structures.+In+Proceedings+of+the+22nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+64%2D%2D73.+10.1145%2F1321631.1321643+
http://scholar.google.com/scholar?hl=en&q=H.+ETO+and+K.+Yoda.+2001.+Propolice%3A+Improved+stacksmashing+attack+detection.+IPSJ+SIG+Not2+75+%282001%29%2C+181%2D%2D188.
http://scholar.google.com/scholar?hl=en&q=S.+Forrest%2C+T.+V.+Nguyen%2C+W.+Weimer%2C+and+C.+Le+Goues.+2009.+A+genetic+programming+approach+to+automated+software+repair.+In+Proceedings+of+the+11th+Annual+Conference+on+Genetic+and+Evolutionary+Computation.+947%2D%2D954.+10.1145%2F1569901.1570031+
http://scholar.google.com/scholar?hl=en&q=Gerhard+Friedrich%2C+Mariagrazia+Fugini%2C+Enrico+Mussi%2C+Barbara+Pernici%2C+and+Gaston+Tagni.+2010.+Exception+handling+for+repair+in+service-based+processes.+IEEE+Trans.+Softw.+Eng.+36%2C+2+%282010%29%2C+198%2D%2D215.+10.1109%2FTSE.2010.8+
http://scholar.google.com/scholar?hl=en&q=Zachary+P.+Fry%2C+Bryan+Landau%2C+and+Westley+Weimer.+2012.+A+human+study+of+patch+maintainability.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis.+177%2D%2D187.+10.1145%2F2338965.2336775+
http://scholar.google.com/scholar?hl=en&q=Richard+P.+Gabriel+and+Ron+Goldman.+2006.+Conscientious+software.+In+ACM+SIGPLAN+Notices%2C+Vol.+41.+433%2D%2D450.+10.1145%2F1167515.1167510+
http://scholar.google.com/scholar?hl=en&q=Qing+Gao%2C+Yingfei+Xiong%2C+Yaqing+Mi%2C+Lu+Zhang%2C+Weikun+Yang%2C+Zhaoping+Zhou%2C+Bing+Xie%2C+and+Hong+Mei.+2015.+Safe+memory-leak+fixing+for+C+programs.+In+Proceedings+of+the+37th+International+Conference+on+Software+Engineering.+459%2D%2D470.+
http://scholar.google.com/scholar?hl=en&q=Qing+Gao%2C+Hansheng+Zhang%2C+Jie+Wang%2C+Yingfei+Xiong%2C+Lu+Zhang%2C+and+Hong+Mei.+2015.+Fixing+recurring+crash+bugs+via+analyzing+Q%26A+sites.+In+Proceedings+of+the+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+ACM.
http://scholar.google.com/scholar?hl=en&q=Z.+Gao%2C+Z.+Chen%2C+Y.+Zou%2C+and+A.+Memon.+2015.+SITAR%3A+GUI+test+script+repair.+IEEE+Trans.+Softw.+Eng.+42%2C+2+%282015%29%2C+170%2D%2D186.+10.1109%2FTSE.2015.2454510+
http://scholar.google.com/scholar?hl=en&q=David+Garlan%2C+Shang-Wen+Cheng%2C+and+Bradley+Schmerl.+2003.+Increasing+system+dependability+through+architecture-based+self-repair.+In+Architecting+Dependable+Systems.+61%2D%2D89.+
http://scholar.google.com/scholar?hl=en&q=Brady+J.+Garvin%2C+Myra+B.+Cohen%2C+and+Matthew+B.+Dwyer.+2011.+Using+feature+locality%3A+Can+we+leverage+history+to+avoid+failures+during+reconfiguration%3F+In+Proceedings+of+the+8th+Workshop+on+Assurances+for+Self-Adaptive+Systems.+24%2D%2D33.+10.1145%2F2024436.2024443+
http://scholar.google.com/scholar?hl=en&q=Selvin+George%2C+David+Evans%2C+and+Steven+Marchette.+2013.+A+biological+programming+model+for+self-healing.+In+Proceedings+of+the+2003+ACM+Workshop+on+Survivable+and+Self-Regenerative+Systems+%28SSRS%29.+Fairfax%2C+VA%2C+72%2D%2D81.+10.1145%2F1036921.1036929+
http://scholar.google.com/scholar?hl=en&q=Debanjan+Ghosh%2C+Raj+Sharman%2C+H.+Raghav+Rao%2C+and+Shambhu+Upadhyaya.+2007.+Self-healing+systems+survey+and+synthesis.+Decis.+Support+Syst.+42%2C+4+%282007%29%2C+2164%2D%2D2185.+10.1016%2Fj.dss.2006.06.011+
http://scholar.google.com/scholar?hl=en&q=Divya+Gopinath%2C+Sarfraz+Khurshid%2C+Diptikalyan+Saha%2C+and+Satish+Chandra.+2014.+Data-guided+repair+of+selection+statements.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering.+243%2D%2D253.+10.1145%2F2568225.2568303+
http://scholar.google.com/scholar?hl=en&q=Divya+Gopinath%2C+Muhammad+Zubair+Malik%2C+and+Sarfraz+Khurshid.+2011.+Specification-based+program+repair+using+SAT.+In+Proceedings+of+the+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems.+
http://scholar.google.com/scholar?hl=en&q=Andreas+Griesmayer%2C+Roderick+Bloem%2C+and+Byron+Cook.+2006.+Repair+of+boolean+programs+with+an+application+to+C.+In+Computer+Aided+Verification.+358%2D%2D371.+10.1007%2F11817963_33+
http://scholar.google.com/scholar?hl=en&q=Rahul+Gupta%2C+Soham+Pal%2C+Aditya+Kanade%2C+and+Shirish+Shevade.+2017.+DeepFix%3A+Fixing+common+C+language+errors+by+deep+learning.+In+Proceedings+of+the+AAAI+Conference+on+Artificial+Intelligence.
http://scholar.google.com/scholar?hl=en&q=Bj%C3%B6rn+Hartmann%2C+Daniel+MacDougall%2C+Joel+Brandt%2C+and+Scott+R.+Klemmer.+2010.+What+would+other+programmers+do%3A+Suggesting+solutions+to+error+messages.+In+Proceedings+of+the+SIGCHI+Conference+on+Human+Factors+in+Computing+Systems.+1019%2D%2D1028.+10.1145%2F1753326.1753478+
http://scholar.google.com/scholar?hl=en&q=Haifeng+He+and+Neelam+Gupta.+2004.+Automated+debugging+using+path-based+weakest+preconditions.+In+Proceedings+of+the+7th+International+Conference+on+Fundamental+Approaches+to+Software+Engineering+%28FASE%E2%80%9904%29.+267%2D%2D280.
http://scholar.google.com/scholar?hl=en&q=Petr+Hosek+and+Cristian+Cadar.+2013.+Safe+software+updates+via+multi-version+execution.+In+Proceedings+of+the+International+Conference+on+Software+Engineering.+612%2D%2D621.+
http://scholar.google.com/scholar?hl=en&q=David+Hovemeyer+and+William+Pugh.+2004.+Finding+bugs+is+easy.+ACM+SIGPLAN+Not.+39%2C+12+%282004%29.+10.1145%2F1052883.1052895+
http://scholar.google.com/scholar?hl=en&q=Y.+Huang%2C+C.+Kintala%2C+N.+Kolettis%2C+and+N.+D.+Fulton.+1995.+Software+rejuvenation%3A+Analysis%2C+module+and+applications.+In+Proceedings+of+the+International+Symposium+on+Fault-Tolerant+Computing.+381%2D%2D390.+
http://scholar.google.com/scholar?hl=en&q=Daniel+Jackson+and+Mandana+Vaziri.+2000.+Finding+bugs+with+a+constraint+solver.+In+Proceedings+of+the+2000+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+14%2D%2D25.+10.1145%2F347324.383378+
http://scholar.google.com/scholar?hl=en&q=Dennis+Jeffrey%2C+Min+Feng%2C+Neelam+Gupta%2C+and+Rajiv+Gupta.+2009.+BugFix%3A+A+learning-based+tool+to+assist+developers+in+fixing+bugs.+In+Proceedings+of+the+International+Conference+on+Program+Comprehension+%28ICPC%E2%80%9909%29.+70%2D%2D79.
http://scholar.google.com/scholar?hl=en&q=Dennis+Jeffrey%2C+Neelam+Gupta%2C+and+Rajiv+Gupta.+2008.+Fault+localization+using+value+replacement.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis.+167%2D%2D178.+10.1145%2F1390630.1390652+
http://scholar.google.com/scholar?hl=en&q=Susmit+Jha%2C+Sumit+Gulwani%2C+Sanjit+A+Seshia%2C+and+Ashish+Tiwari.+2010.+Oracle-guided+component-based+program+synthesis.+In+Proceedings+of+the+International+Conference+on+Software+Engineering%2C+Vol.+1.+215%2D%2D224.+10.1145%2F1806799.1806833+
http://scholar.google.com/scholar?hl=en&q=Mingyue+Jiang%2C+Tsong+Yueh+Chen%2C+Fei-Ching+Kuo%2C+Dave+Towey%2C+and+Zuohua+Ding.+2016.+A+metamorphic+testing+approach+for+supporting+program+repair+without+the+need+for+a+test+oracle.+J.+Syst.+Softw.+%282016%29.
http://scholar.google.com/scholar?hl=en&q=G.+Jin%2C+L.+Song%2C+W.+Zhang%2C+S.+Lu%2C+and+B.+Liblit.+2011.+Automated+atomicity-violation+fixing.+In+Proceedings+of+the+32nd+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+46%2C+6+%282011%29%2C+389%2D%2D400.+10.1145%2F1993498.1993544+
http://scholar.google.com/scholar?hl=en&q=Barbara+Jobstmann%2C+Andreas+Griesmayer%2C+and+Roderick+Bloem.+2005.+Program+repair+as+a+game.+In+Computer+Aided+Verification.+226%2D%2D238.+10.1007%2F11513988_23+
http://scholar.google.com/scholar?hl=en&q=H.+Jula%2C+D.+Tralamazza%2C+C.+Zamfir%2C+and+G.+Candea.+2008.+Deadlock+immunity%3A+Enabling+systems+to+defend+against+deadlocks.+In+Proceedings+of+the+8th+USENIX+Conference+on+Operating+Systems+Design+and+Implementation.+295%2D%2D308.+
http://scholar.google.com/scholar?hl=en&q=Shalini+Kaleeswaran%2C+Varun+Tulsian%2C+Aditya+Kanade%2C+and+Alessandro+Orso.+2014.+Minthint%3A+Automated+synthesis+of+repair+hints.+In+Proceedings+of+the+International+Conference+on+Software+Engineering.+266%2D%2D276.+10.1145%2F2568225.2568258+
http://scholar.google.com/scholar?hl=en&q=Sara+Kalvala+and+Richard+Warburton.+2011.+A+formal+approach+to+fixing+bugs.+In+Formal+Methods%2C+Foundations+and+Applications.+172%2D%2D187.+10.1007%2F978-3-642-25032-3_12+
http://scholar.google.com/scholar?hl=en&q=Aditya+Kalyanpur%2C+Bijan+Parsia%2C+Evren+Sirin%2C+and+Bernardo+Cuenca-Grau.+2006.+Repairing+unsatisfiable+concepts+in+OWL+ontologies.+In+The+Semantic+Web%3A+Research+and+Applications.+Vol.+4011.+170%2D%2D184.+10.1007%2F11762256_15+
http://scholar.google.com/scholar?hl=en&q=M.+Kasbekar%2C+C.+Narayanan%2C+and+C.+R.+Das.+1999.+Selective+checkpointing+and+rollbacks+in+multi-threaded+object-oriented+environment.+IEEE+Trans.+Reliabil.+48%2C+4+%281999%29%2C+325%2D%2D337.
http://scholar.google.com/scholar?hl=en&q=Yalin+Ke%2C+Kathryn+T.+Stolee%2C+Claire+Le+Goues%2C+and+Yuriy+Brun.+2015.+Repairing+programs+with+semantic+code+search.+In+Proceedings+of+the+International+Conference+on+Automated+Software+Engineering.
http://scholar.google.com/scholar?hl=en&q=Christian+Kern+and+Javier+Esparza.+2010.+Automatic+error+correction+of+java+programs.+In+Formal+Methods+for+Industrial+Critical+Systems.+67%2D%2D81.+
http://scholar.google.com/scholar?hl=en&q=Dongsun+Kim%2C+Jaechang+Nam%2C+Jaewoo+Song%2C+and+Sunghun+Kim.+2013.+Automatic+patch+generation+learned+from+human-written+patches.+In+Proceedings+of+the+32nd+ACM%2FIEEE+International+Conference+on+Software+Engineering+%28ICSE%E2%80%9913%29.+
http://scholar.google.com/scholar?hl=en&q=Etienne+Kneuss%2C+Manos+Koukoutos%2C+and+Viktor+Kuncak.+2015.+Deductive+program+repair.+In+International+Conference+on+Computer+Aided+Verification.+Springer%2C+217%2D%2D233.
http://scholar.google.com/scholar?hl=en&q=Donald+E.+Knuth.+1989.+The+errors+of+TEX.+Softw.+Pract.+Exper.+19%2C+7+%281989%29%2C+607%2D%2D685.+10.1002%2Fspe.4380190702+
http://scholar.google.com/scholar?hl=en&q=Xianglong+Kong%2C+Lingming+Zhang%2C+W.+Eric+Wong%2C+and+Bixin+Li.+2015.+Experience+report%3A+How+do+techniques%2C+programs%2C+and+tests+impact+automated+program+repair%3F+In+Proceedings+of+the+International+Symposium+on+Software+Reliability+Engineering.+IEEE%2C+194%2D%2D204.+10.1109%2FISSRE.2015.7381813+
http://scholar.google.com/scholar?hl=en&q=Robert+K%C3%B6nighofer+and+Roderick+Bloem.+2011.+Automated+error+localization+and+correction+for+imperative+programs.+In+Proceedings+of+the+Formal+Methods+in+Computer-Aided+Design+%28FMCAD%E2%80%9911%29%2C+2011.+91%2D%2D100.+
http://scholar.google.com/scholar?hl=en&q=Robert+K%C3%B6nighofer+and+Roderick+Bloem.+2013.+Repair+with+on-the-fly+program+analysis.+In+Hardware+and+Software%3A+Verification+and+Testing.+56%2D%2D71.+10.1007%2F978-3-642-39611-3_11+
http://scholar.google.com/scholar?hl=en&q=R.+Koo+and+S.+Toueg.+1987.+Checkpointing+and+rollback-recovery+for+distributed+systems.+IEEE+Trans.+Softw.+Eng.+1+%281987%29%2C+23%2D%2D31.+10.1109%2FTSE.1987.232562+
http://scholar.google.com/scholar?hl=en&q=Matt+Lake.+2010.+Epic+Failures%3A+11+Infamous+Software+Bugs.+Retrieved+from+http%3A%2F%2Fwww.computerworld.com%2Farticle%2F2515483%2Fenterprise-applications%2Fepic-failures%2D%2D11-infamous-software-bugs.html.
http://scholar.google.com/scholar?hl=en&q=Sebastian+Lamelas-Marcote+and+Martin+Monperrus.+2015.+Automatic+Repair+of+Infinite+Loops.+Technical+Report+hal-01144026.+University+of+Lille.+https%3A%2F%2Farxiv.org%2Fpdf%2F1504.05078.pdf.
http://scholar.google.com/scholar?hl=en&q=Julia+L.+Lawall%2C+Julien+Brunel%2C+Nicolas+Palix%2C+Ren%C3%A9+Rydhof+Hansen%2C+Henrik+Stuart%2C+and+Gilles+Muller.+2009.+WYSIWIB%3A+A+declarative+approach+to+finding+API+protocols+and+bugs+in+linux+code.+In+International+Conference+on+Dependable+Systems+8+Networks.+43%2D%2D52.
http://scholar.google.com/scholar?hl=en&q=N.+Lazaar%2C+A.+Gotlieb%2C+and+Y.+Lebbah.+2011.+A+framework+for+the+automatic+correction+of+constraint+programs.+In+Proceedings+of+the+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+319%2D%2D326.+10.1109%2FICST.2011.41+
http://scholar.google.com/scholar?hl=en&q=X.+B.+D.+Le%2C+D.+Lo%2C+and+C.+L.+Goues.+2016.+History+driven+program+repair.+In+Proceedings+of+the+23rd+International+Conference+on+Software+Analysis%2C+Evolution%2C+and+Reengineering+%28SANER%E2%80%9916%29.+213%2D%2D224.
http://scholar.google.com/scholar?hl=en&q=C.+Le+Goues%2C+M.+Dewey-Vogt%2C+S.+Forrest%2C+and+W.+Weimer.+2012.+A+systematic+study+of+automated+program+repair%3A+fixing+55+out+of+105+bugs+for+%26dollar%3B8+each.+In+Proceedings+of+the+International+Conference+on+Software+Engineering.+3%2D%2D13.+
http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2013.+Current+challenges+in+automatic+software+repair.+Softw.+Qual.+J.+21%2C+3+%282013%29%2C+421%2D%2D443.+10.1007%2Fs11219-013-9208-0+
http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Neal+Holtschulte%2C+Edward+K.+Smith%2C+Yuriy+Brun%2C+Premkumar+Devanbu%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2015.+The+ManyBugs+and+IntroClass+benchmarks+for+automated+repair+of+C+programs.+%28unpublished%29.
http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+ThanhVu+Nguyen%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2012.+GenProg%3A+A+generic+method+for+automatic+software+repair.+IEEE+Trans.+Softw.+Eng.+38+%282012%29%2C+54%2D%2D72.+10.1109%2FTSE.2011.104+
http://scholar.google.com/scholar?hl=en&q=Maurizio+Leotta%2C+Diego+Clerissi%2C+Filippo+Ricca%2C+and+Cristiano+Spadaro.+2013.+Repairing+selenium+test+cases%3A+An+industrial+case+study+about+web+page+element+localization.+In+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+IEEE%2C+487%2D%2D488.+10.1109%2FICST.2013.73+
http://scholar.google.com/scholar?hl=en&q=R.+Levinson.+2005.+Unified+planning+and+execution+for+autonomous+software+repair.+In+Workshop+on+Plan+Execution%3A+A+Reality+Check.
http://scholar.google.com/scholar?hl=en&q=Chris+Lewis+and+Jim+Whitehead.+2010.+Runtime+repair+of+software+faults+using+event-driven+monitoring.+In+Proceedings+of+the+32nd+ACM%2FIEEE+International+Conference+on+Software+Engineering+%28ICSE%E2%80%9910%29%2C+vol.+2.+275.+10.1145%2F1810295.1810352+
