http://scholar.google.com/scholar?hl=en&q=Martin+Abadi%2C+Mihai+Budiu%2C+%C3%9Alfar+Erlingsson%2C+and+Jay+Ligatti.+2005a.+Control-flow+integrity%3A+Principles%2C+implementations%2C+and+applications.+In+ACM+Conference+on+Computer+and+Communications+Security+%28CCS%E2%80%9905%29.+10.1145%2F1102120.1102165+
http://scholar.google.com/scholar?hl=en&q=Mart%C3%ADn+Abadi%2C+Mihai+Budiu%2C+%C3%9Alfar+Erlingsson%2C+and+Jay+Ligatti.+2005b.+A+theory+of+secure+control+flow.+In+Proceedings+of+the+7th+International+Conference+on+Formal+Methods+and+Software+Engineering+%28ICFEM%E2%80%9905%29.+10.1007%2F11576280_9+
http://scholar.google.com/scholar?hl=en&q=Orlando+Arias%2C+Lucas+Davi%2C+Matthias+Hanreich%2C+Yier+Jin%2C+Patrick+Koeberl%2C+Debayan+Paul%2C+Ahmad-Reza+Sadeghi%2C+and+Dean+Sullivan.+2015.+HAFIX%3A+Hardware-assisted+flow+integrity+extension.+In+Annual+Design+Automation+Conference+%28DAC%E2%80%9915%29.
http://scholar.google.com/scholar?hl=en&q=John+Aycock.+2003.+A+brief+history+of+just-in-time.+Computing+Surveys+35%2C+2%2C+97%2D%2D113.+10.1145%2F857076.857077+
http://scholar.google.com/scholar?hl=en&q=David+F.+Bacon+and+Peter+F.+Sweeney.+1996.+Fast+static+analysis+of+C%2B%2B+virtual+function+calls.+ACM+SIGPLAN+Notices+31%2C+10%2C+324%2D%2D341.+10.1145%2F236338.236371+
http://scholar.google.com/scholar?hl=en&q=James+R.+Bell.+1973.+Threaded+code.+Communications+of+the+ACM+16%2C+6%2C+370%2D%2D372.+10.1145%2F362248.362270+
http://scholar.google.com/scholar?hl=en&q=Tyler+Bletsch%2C+Xuxian+Jiang%2C+and+Vince+Freeh.+2011.+Mitigating+code-reuse+attacks+with+control-flow+locking.+In+Annual+Computer+Security+Applications+Conference+%28ACSAC%E2%80%9911%29.+New+York%2C+NY.+10.1145%2F2076732.2076783+
http://scholar.google.com/scholar?hl=en&q=Dimitar+Bounov%2C+Rami+Kici%2C+and+Sorin+Lerner.+2016.+Protecting+C%2B%2B+dynamic+dispatch+through+vtable+interleaving.+In+Symposium+on+Network+and+Distributed+System+Security+%28NDSS%E2%80%9916%29.
http://scholar.google.com/scholar?hl=en&q=Nicholas+Carlini%2C+Antonio+Barresi%2C+Mathias+Payer%2C+David+Wagner%2C+and+Thomas+R.+Gross.+2015.+Control-flow+bending%3A+On+the+effectiveness+of+control-flow+integrity.+In+24th+USENIX+Security+Symposium%2C+USENIX+Security+15.+Washington%2C+D.C.%2C+August+12-14%2C+2015.
http://scholar.google.com/scholar?hl=en&q=Nicholas+Carlini+and+David+Wagner.+2014.+ROP+is+still+dangerous%3A+Breaking+modern+defenses.+In+USENIX+Security+Symposium.
http://scholar.google.com/scholar?hl=en&q=Stephen+Checkoway%2C+Lucas+Davi%2C+Alexandra+Dmitrienko%2C+Ahmad-Reza+Sadeghi%2C+Hovav+Shacham%2C+and+Marcel+Winandy.+2010.+Return-oriented+programming+without+returns.+In+ACM+Conference+on+Computer+and+Communications+Security+%28CCS%29.+10.1145%2F1866307.1866370+
http://scholar.google.com/scholar?hl=en&q=Yueqiang+Cheng%2C+Zongwei+Zhou%2C+Yu+Miao%2C+Xuhua+Ding%2C+and+Robert+Huijie+Deng.+2014.+ROPecker%3A+A+generic+and+practical+approach+for+defending+against+ROP+attacks.+In+Symposium+on+Network+and+Distributed+System+Security+%28NDSS%E2%80%9914%29.+10.14722%2Fndss.2014.23156
http://scholar.google.com/scholar?hl=en&q=Nick+Christoulakis%2C+George+Christou%2C+Elias+Athanasopoulos%2C+and+Sotiris+Ioannidis.+2016.+HCFI%3A+Hardware-enforced+control-flow+integrity.+In+CODASPY%E2%80%9916.
http://scholar.google.com/scholar?hl=en&q=Peter+Collingbourne.+2015.+LLVM%E2%80%94Control+Flow+Integrity.+%282015%29.+Retrieved+March+1%2C+2017+from+http%3A%2F%2Fclang.llvm.org%2Fdocs%2FControlFlowIntegrity.html.
http://scholar.google.com/scholar?hl=en&q=Mauro+Conti%2C+Stephen+Crane%2C+Lucas+Davi%2C+Michael+Franz%2C+Per+Larsen%2C+Christopher+Liebchen%2C+Marco+Negro%2C+Mohaned+Qunaibit%2C+and+Ahmad-Reza+Sadeghi.+2015.+Losing+control%3A+On+the+effectiveness+of+control-flow+integrity+under+stack+attacks.+In+ACM+Conference+on+Computer+and+Communications+Security+%28CCS%E2%80%9915%29.+10.1145%2F2810103.2813671+
http://scholar.google.com/scholar?hl=en&q=John+Criswell%2C+Nathan+Dautenhahn%2C+and+Vikram+Adve.+2014a.+KCoFI%3A+Complete+control-flow+integrity+for+commodity+operating+system+kernels.+In+2014+IEEE+Symposium+on+Security+and+Privacy.+10.1109%2FSP.2014.26+
http://scholar.google.com/scholar?hl=en&q=John+Criswell%2C+Nathan+Dautenhahn%2C+and+Vikram+Adve.+2014b.+KCoFI%3A+Complete+control-flow+integrity+for+commodity+operating+system+kernels.+In+IEEE+Symposium+on+Security+and+Privacy+%28S8P%29.
http://scholar.google.com/scholar?hl=en&q=Thurston+H.+Y.+Dang%2C+Petros+Maniatis%2C+and+David+Wagner.+2015.+The+performance+cost+of+shadow+stacks+and+stack+canaries.+In+ACM+Symposium+on+Information%2C+Computer+and+Communications+Security+%28ASIACCS%E2%80%9915%29.+10.1145%2F2714576.2714635+
http://scholar.google.com/scholar?hl=en&q=Lucas+Davi%2C+Alexandra+Dmitrienko%2C+Manuel+Egele%2C+Thomas+Fischer%2C+Thorsten+Holz%2C+Ralf+Hund%2C+Stefan+N%C3%BCrnberger%2C+and+Ahmad-Reza+Sadeghi.+2012.+MoCFI%3A+A+framework+to+mitigate+control-flow+attacks+on+smartphones.+In+Symposium+on+Network+and+Distributed+System+Security+%28NDSS%E2%80%9912%29.
http://scholar.google.com/scholar?hl=en&q=Lucas+Davi%2C+Patrick+Koeberl%2C+and+Ahmad-Reza+Sadeghi.+2014a.+Hardware-assisted+fine-grained+control-flow+integrity%3A+Towards+efficient+protection+of+embedded+systems+against+software+exploitation.+In+Annual+Design+Automation+Conference+%28DAC%E2%80%9914%29.+10.1145%2F2593069.2596656+
http://scholar.google.com/scholar?hl=en&q=Lucas+Davi%2C+Daniel+Lehmann%2C+Ahmad-Reza+Sadeghi%2C+and+Fabian+Monrose.+2014b.+Stitching+the+gadgets%3A+On+the+ineffectiveness+of+coarse-grained+control-flow+integrity+protection.+In+USENIX+Security+Symposium.
http://scholar.google.com/scholar?hl=en&q=Jeffrey+Dean%2C+David+Grove%2C+and+Craig+Chambers.+1995.+Optimization+of+object-oriented+programs+using+static+class+hierarchy+analysis.+In+European+Conference+on+Object-Oriented+Programming+%28ECOOP%E2%80%9995%29.+10.1007%2F3-540-49538-X_5
http://scholar.google.com/scholar?hl=en&q=Eddy+H.+Debaere+and+Jan+M.+van+Campenhout.+1990.+Interpretation+and+Instruction+Path+Coprocessing.+MIT+Press%2C+Cambridge%2C+MA.
http://scholar.google.com/scholar?hl=en&q=Isaac+Evans%2C+Samuel+Fingeret%2C+Julian+Gonzalez%2C+Ulziibayar+Otgonbaatar%2C+Tiffany+Tang%2C+Howard+Shrobe%2C+Stelios+Sidiroglou-Douskos%2C+Martin+Rinard%2C+and+Hamed+Okhravi.+2015a.+Missing+the+point%3A+On+the+effectiveness+of+code+pointer+integrity.+In+IEEE+Symposium+on+Security+and+Privacy+%28S8P%E2%80%9915%29.
http://scholar.google.com/scholar?hl=en&q=Isaac+Evans%2C+Fan+Long%2C+Ulziibayar+Otgonbaatar%2C+Howard+Shrobe%2C+Martin+Rinard%2C+Hamed+Okhravi%2C+and+Stelios+Sidiroglou-Douskos.+2015b.+Control+jujutsu%3A+On+the+weaknesses+of+fine-grained+control+flow+integrity.+In+Proceedings+of+the+22nd+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+10.1145%2F2810103.2813646+
http://scholar.google.com/scholar?hl=en&q=Francisco+Falcon.+2015.+Exploiting+Adobe+Flash+Player+in+the+era+of+Control+Flow+Guard.+BlackHat+EU%E2%80%9915.+Retrieved+March+1%2C+2017+from+https%3A%2F%2Fwww.blackhat.com%2Fdocs%2Feu-15%2Fmaterials%2Feu-15-Falcon-Exploiting-Adobe-Flash-Player-In-The-Era-Of-Control-Flow-Guard.pdf.
http://scholar.google.com/scholar?hl=en&q=Ivan+Fratric.+2012.+ROPGuard%3A+Runtime+Prevention+of+Return-Oriented+Programming+Attacks.+Retrieved+March+1%2C+2017+from+http%3A%2F%2Fwww.ieee.hr%2F_download%2Frepository%2FIvan_Fratric.pdf.+%282012%29.
http://scholar.google.com/scholar?hl=en&q=Xinyang+Ge%2C+Nirupama+Talele%2C+Mathias+Payer%2C+and+Trent+Jaeger.+2016.+Fine-grained+control-flow+integrity+for+kernel+software.+In+IEEE+European+Symposium+on+Security+and+Privacy.+10.1109%2FEuroSP.2016.24
http://scholar.google.com/scholar?hl=en&q=Enes+G%C3%B6ktas%2C+Elias+Athanasopoulos%2C+Herbert+Bos%2C+and+Georgios+Portokalidis.+2014.+Out+of+control%3A+Overcoming+control-flow+integrity.+In+IEEE+Symposium+on+Security+and+Privacy+%28S8P%E2%80%9914%29.
http://scholar.google.com/scholar?hl=en&q=David+Grove+and+Craig+Chambers.+2001.+A+framework+for+call+graph+construction+algorithms.+ACM+Transactions+on+Programming+Languages+and+Systems+23%2C+6%2C+685%2D%2D746.+10.1145%2F506315.506316+
http://scholar.google.com/scholar?hl=en&q=Brian+Hackett+and+Alex+Aiken.+2006.+How+is+aliasing+used+in+systems+software%3F+Proceedings+of+the+14th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+69%2D%2D80.+10.1145%2F1181775.1181785+
http://scholar.google.com/scholar?hl=en&q=Ben+Hardekopf+and+Calvin+Lin.+2007.+The+ant+and+the+grasshopper.+In+Proceedings+of+the+2007+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28PLDI%E2%80%9907%29%2C+Vol.+42.+ACM+Press%2C+New+York%2C+NY%2C+290.+DOI%3Ahttp%3A%2F%2Fdx.doi.org%2F10.1145%2F1250734.1250767+10.1145%2F1250734.1250767+
http://scholar.google.com/scholar?hl=en&q=Ben+Hardekopf+and+Calvin+Lin.+2011.+Flow-sensitive+pointer+analysis+for+millions+of+lines+of+code.+In+International+Symposium+on+Code+Generation+and+Optimization+%28CGO%E2%80%9911%29.+IEEE%2C+289%2D%2D298.+DOI%3Ahttp%3A%2F%2Fdx.doi.org%2F10.1109%2FCGO.2011.5764696+10.1109%2FCGO.2011.5764696
http://scholar.google.com/scholar?hl=en&q=Michael+Hind.+2001.+Pointer+analysis.+In+Proceedings+of+the+2001+ACM+SIGPLAN-SIGSOFT+Workshop+on+Program+Analysis+for+Software+Tools+and+Engineering+%28PASTE%E2%80%9901%29.+ACM+Press%2C+New+York%2C+NY%2C+54%2D%2D61.+DOI%3Ahttp%3A%2F%2Fdx.doi.org%2F10.1145%2F379605.379665+10.1145%2F379605.379665+
http://scholar.google.com/scholar?hl=en&q=Michael+Hind+and+Anthony+Pioli.+2000.+Which+pointer+analysis+should+I+use%3F+ACM+SIGSOFT+Software+Engineering+Notes+25%2C+5%2C+113%2D%2D123.+10.1145%2F347636.348916+
http://scholar.google.com/scholar?hl=en&q=Urs+H%C3%B6lzle+and+David+Ungar.+1994.+Optimizing+dynamically-dispatched+calls+with+run-time+type+feedback.+In+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28PLDI%E2%80%9994%29.+10.1145%2F178243.178478+
http://scholar.google.com/scholar?hl=en&q=Intel+Inc.+2013.+Intel+64+and+IA-32+Architectures.+Software+Developer%E2%80%99s+Manual.
http://scholar.google.com/scholar?hl=en&q=Dongseok+Jang%2C+Zachary+Tatlock%2C+and+Sorin+Lerner.+2014.+SAFEDISPATCH%3A+Securing+C%2B%2B+virtual+calls+from+memory+corruption+attacks.+In+Symposium+on+Network+and+Distributed+System+Security+%28NDSS%E2%80%9914%29.+10.14722%2Fndss.2014.23287
http://scholar.google.com/scholar?hl=en&q=Vladimir+Kiriansky.+2013.+Secure+Execution+Environment+via+Program+Shepherding.+Master%E2%80%99s+thesis.+Massachusetts+Institute+of+Technology%2C+Cambridge%2C+MA.
http://scholar.google.com/scholar?hl=en&q=Vladimir+Kiriansky%2C+Derek+Bruening%2C+and+Saman+Amarasinghe.+2002.+Secure+execution+via+program+shepherding.+In+USENIX+Security+Symposium.
http://scholar.google.com/scholar?hl=en&q=Peter+M.+Kogge.+1982.+An+architectural+trail+to+threaded-code+systems.+Computer+15%2C+3%2C+22%2D%2D32.+DOI%3Ahttp%3A%2F%2Fdx.doi.org%2F10.1109%2FMC.1982.1653970+10.1109%2FMC.1982.1653970+
http://scholar.google.com/scholar?hl=en&q=Per+Larsen%2C+Andrei+Homescu%2C+Stefan+Brunthaler%2C+and+Michael+Franz.+2014.+SoK%3A+Automated+software+diversity.+In+IEEE+Symposium+on+Security+and+Privacy+%28S8P%E2%80%9914%29.
http://scholar.google.com/scholar?hl=en&q=O.+Lhot%C3%A1k+and+Laurie+Hendren.+2006.+Context-sensitive+points-to+analysis%3A+Is+it+worth+it%3F+Compiler+Construction+47%2D%2D64.
